// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LiveDex.Models;
//
//    var pokedex = Pokedex.FromJson(jsonString);

namespace LiveDex.Models {
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.Net.Http;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Pokemon {

        public bool Obtained {
            get {
                App.CaughtDatabaseInstance.GetCaughtStatus(index);
                return PokeData.Caught[index].Obtained;
            }
            set {
                var pokemon = new CaughtModel { ID = index, Obtained = value };
                App.CaughtDatabaseInstance.SetCaughtStatus(pokemon);
                PokeData.Caught[index].Obtained = value;
            }
        }

        [JsonProperty("abilities")]
        public List<Ability> Abilities { get; set; }

        [JsonProperty("base_experience")]
        public long BaseExperience { get; set; }

        [JsonProperty("forms")]
        public List<NameURL> Forms { get; set; }

        [JsonProperty("game_indices")]
        public List<GameIndex> GameIndices { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("held_items")]
        public List<HeldItem> HeldItems { get; set; }

        [JsonProperty("id")]
        public int DexNum { get; set; }
        public int index {
            get {
                return DexNum - 1;
            }
            set { }
        }

        [JsonProperty("is_default")]
        public bool IsDefault { get; set; }

        [JsonProperty("location_area_encounters")]
        public Uri LocationAreaEncounters { get; set; }

        public List<PokemonLocation> EncounterDetails { get; set; }

        public List<Route> Routes {
            get {
                var routes = new List<Route>();
                if (EncounterDetails.Count != 0) {
                    foreach (PokemonLocation location in EncounterDetails) {
                        foreach (LocationVersionDetail details in location.VersionDetails) {
                            var route = new Route {
                                Name = location.LocationArea.FormattedName,
                                Details = details
                            };
                            routes.Add(route);
                        }
                    }
                    //return routes.OrderBy(r => r.Details.Version.FormattedName).ToList();
                } else routes.Add(new Route { Name = "Cannot be caught" });
                return routes;
            }
            set { }
        }

        public List<string> GamesCatchable {
            get {
                var gameList = new List<string>();
                if (EncounterDetails.Count != 0) {
                    foreach (var game in Routes) {
                        var gameName = game.Details.Version.FormattedName;
                        if (!gameList.Contains(gameName)) gameList.Add(gameName);
                    }
                }
                gameList.Sort();
                return gameList;
            }
            set { }
        }

        [JsonProperty("moves")]
        public List<Move> Moves { get; set; }

        [JsonProperty("name")]
        private string lowercaseName { get; set; }

        public string Name {
            get {
                if (DexNum <= PokeData.Names.Length) return PokeData.Names[index];
                return char.ToUpper(lowercaseName[0]) + lowercaseName.Substring(1);
            }
            set { }
        }

        [JsonProperty("order")]
        public long Order { get; set; }

        [JsonProperty("species")]
        public NameURL Species { get; set; }

        public PokemonSpecies SpeciesData { get; set; }

        [JsonProperty("sprites")]
        public Sprites Sprites { get; set; }

        [JsonProperty("stats")]
        public List<Stat> Stats { get; set; }

        [JsonProperty("types")]
        public List<TypeElement> Types { get; set; }

        [JsonProperty("weight")]
        public long Weight { get; set; }
    }

    public partial class Ability {
        [JsonProperty("ability")]
        public NameURL AbilityAbility { get; set; }

        [JsonProperty("is_hidden")]
        public bool IsHidden { get; set; }

        [JsonProperty("slot")]
        public long Slot { get; set; }
    }

    public partial class NameURL {
        [JsonProperty("name")]
        public string Name { get; set; }

        public string FormattedName {
            get {
                Name = Name.Replace("-", " ");
                return System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(Name);
            }
            set { }

        }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class GameIndex {
        [JsonProperty("game_index")]
        public long GameIndexGameIndex { get; set; }

        [JsonProperty("version")]
        public NameURL Version { get; set; }
    }

    public partial class HeldItem {
        [JsonProperty("item")]
        public NameURL Item { get; set; }

        [JsonProperty("version_details")]
        public List<HeldItemVersionDetail> VersionDetails { get; set; }
    }

    public partial class HeldItemVersionDetail {
        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("version")]
        public NameURL Version { get; set; }
    }

    public partial class Move {
        [JsonProperty("move")]
        public NameURL MoveMove { get; set; }

        [JsonProperty("version_group_details")]
        public List<MoveVersionDetails> VersionGroupDetails { get; set; }
    }

    public partial class MoveVersionDetails {
        [JsonProperty("level_learned_at")]
        public long LevelLearnedAt { get; set; }

        [JsonProperty("move_learn_method")]
        public NameURL MoveLearnMethod { get; set; }

        [JsonProperty("version_group")]
        public NameURL VersionGroup { get; set; }
    }

    public partial class Sprites {
        [JsonProperty("back_default")]
        public Uri BackDefault { get; set; }

        [JsonProperty("back_female")]
        public Uri BackFemale { get; set; }

        [JsonProperty("back_shiny")]
        public Uri BackShiny { get; set; }

        [JsonProperty("back_shiny_female")]
        public Uri BackShinyFemale { get; set; }

        [JsonProperty("front_default")]
        public Uri FrontDefault { get; set; }

        [JsonProperty("front_female")]
        public Uri FrontFemale { get; set; }

        [JsonProperty("front_shiny")]
        public Uri FrontShiny { get; set; }

        [JsonProperty("front_shiny_female")]
        public Uri FrontShinyFemale { get; set; }
    }

    public partial class Stat {
        [JsonProperty("base_stat")]
        public long BaseStat { get; set; }

        [JsonProperty("effort")]
        public long Effort { get; set; }

        [JsonProperty("stat")]
        public NameURL StatStat { get; set; }
    }

    public partial class TypeElement {
        [JsonProperty("slot")]
        public long Slot { get; set; }

        [JsonProperty("type")]
        public NameURL Type { get; set; }
    }

    public partial class Pokemon {
        public static Pokemon FromJson(string json) => JsonConvert.DeserializeObject<Pokemon>(json, Converter.Settings);
    }
}
