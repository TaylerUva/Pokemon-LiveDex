// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LiveDex.Models;
//
//    var pokedex = Pokedex.FromJson(jsonString);

namespace LiveDex.Models {
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Pokedex {

        [JsonProperty("results")]
        public ObservableCollection<DexEntry> DexEntries { get; set; }
    }

    public partial class DexEntry {
        [JsonProperty("name")]
        private string lowercaseName { get; set; }

        // ADDED
        public string Name {
            get {
                if (DexNum <= PokeData.Names.Count) return PokeData.Names[DexNum - 1];
                return char.ToUpper(lowercaseName[0]) + lowercaseName.Substring(1);
            }
            set { }
        }

        [JsonProperty("url")]
        private Uri EntryUrl { get; set; }


        // ADDED
        public int DexNum {
            get {
                string idString = EntryUrl.Segments[4];
                idString = idString.Replace("/", "");
                return Int32.Parse(idString);
            }
            set { }
        }

        // ADDED
        public string Sprite {
            get {
                return "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/" + DexNum + ".png";
                //return "https://img.pokemondb.net/sprites/sun-moon/icon/" + Name.ToLower() + ".png";
            }
            set { }
        }

        // ADDED
        public bool Obtained {
            get { return PokeData.CaughtPokemonList()[DexNum]; }
            set { PokeData.CaughtPokemonList()[DexNum] = value; }
        }
    }

    public partial class Pokedex {
        public static Pokedex FromJson(string json) => JsonConvert.DeserializeObject<Pokedex>(json, Converter.Settings);
    }

    public static class Serialize {
        public static string ToJson(this Pokedex self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
